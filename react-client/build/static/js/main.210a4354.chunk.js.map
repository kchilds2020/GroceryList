{"version":3,"sources":["components/NavBar.js","components/Item.js","components/Groceries.js","components/AddItemInput.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","listkey","nickname","setNickname","createList","e","a","preventDefault","axios","post","Math","random","toString","substr","response","console","log","window","location","href","data","Navbar","collapseOnSelect","bg","variant","expand","style","boxShadow","Brand","Toggle","aria-controls","Collapse","id","className","Nav","margin","NavDropdown","Divider","Button","onClick","display","FormControl","placeholder","aria-label","aria-describedby","value","onChange","target","localStorage","setItem","alert","marginLeft","width","Item","element","groceries","setGroceries","itemPos","useState","inCart","toggle","setToggle","isLoading","setLoading","deleteItem","_id","temp","splice","toggleItem","ItemContainer","InCartText","text","OutCartText","wordWrap","textAlign","FDRow","name","User","styled","div","Groceries","useEffect","get","getGroceries","removeItems","length","map","index","key","block","AddItemInput","item","addItem","push","AIContainer","onSubmit","AIInput","type","padding","form","input","App","setListKey","queryString","search","URLSearchParams","getItem","Container","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.210a4354.chunk.js","sourcesContent":["import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\nimport NavDropdown from 'react-bootstrap/NavDropdown'\r\nimport axios from 'axios'\r\n\r\nconst NavBar = ({listkey, nickname, setNickname}) => {\r\n\r\n    const addName = (e) => {\r\n        e.preventDefault()\r\n\r\n        localStorage.setItem('nickname', nickname);\r\n\r\n        alert(`Name changed to ${nickname}`)\r\n\r\n    }\r\n\r\n    const createList = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const response = await axios.post(`/add-list`, {listkey: `${Math.random().toString(36).substr(2, 9)}`})\r\n            console.log(response)\r\n            window.location.href= `/?listkey=${response.data.listkey}`\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Navbar collapseOnSelect bg=\"dark\" variant=\"dark\" expand=\"xl\" style={{boxShadow: '2px 0px 4px #333'}}>\r\n                <Navbar.Brand>Grocery List</Navbar.Brand>\r\n                \r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\r\n                    <Nav className=\"justify-content-start\" style={{margin: '0px 10px'}}>\r\n                    <NavDropdown.Divider />\r\n                    <Button variant='outline-primary' onClick={createList}>Create New List</Button>\r\n                    <NavDropdown.Divider />\r\n                    </Nav>\r\n                   \r\n                    <Nav className=\"justify-content-end\">  \r\n                    <div style={{display: 'flex'}}>\r\n                        <FormControl placeholder={nickname} aria-label='nickname' aria-describedby=\"basic-addon1\" value = {nickname} onChange={(e) => setNickname(e.target.value)}/>\r\n                        {/* <input value = {nickname} onChange={(e) => setNickname(e.target.value)}/> */}\r\n                        <Button onClick={addName} style={{marginLeft: '5px', width: '150px'}}>Add Name</Button>\r\n                    </div>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from 'react-bootstrap/Button'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport axios from 'axios'\r\n\r\nconst Item = ({element, groceries, setGroceries, itemPos}) => {\r\n\r\n    const [toggle,setToggle] = useState(element.inCart)\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const deleteItem = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const response = await axios.post('/remove-grocery-item', {id: element._id})\r\n            console.log(response)\r\n            let temp = [...groceries]\r\n            temp.splice(itemPos,1)\r\n            setGroceries(temp)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const toggleItem = async () => {\r\n        try {\r\n            setLoading(true)\r\n            const response = await axios.post(`/toggle-cart`, {id: element._id})\r\n            setLoading(false)\r\n            console.log(response)\r\n            setToggle(!toggle)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ItemContainer onClick={isLoading ? null : toggleItem}>\r\n                {/* <textarea aria-label=\"With textarea\" value={element.text} style={{padding: '0px', border: 'none', width: '60%', resize: 'none'}} row='auto' col='auto' readonly/>{/* <OutCartText>{element.text}</OutCartText> : <InCartText>{element.text}</InCartText>} */}\r\n                {toggle ? <InCartText>{element.text}</InCartText> : <OutCartText style={{wordWrap: 'break-word', width: 'auto', textAlign: 'left'}}>{element.text}</OutCartText> }\r\n                <FDRow >\r\n                    {element.name !== '?' ? <User>{element.name}</User>:<></>}\r\n                    <Button variant='danger' onClick={deleteItem}>X</Button>\r\n                </FDRow>\r\n            </ItemContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Item\r\n\r\nexport const ItemContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 95%;\r\n    border: #aaa 1px solid;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    margin: 5px auto;\r\n    cursor: pointer;\r\n    background-color: white;\r\n`;\r\n\r\nexport const InCartText = styled.div`\r\n    font-size: 24px;\r\n    text-decoration: line-through;\r\n    overflow: hidden;\r\n    padding: 5px;\r\n    word-wrap: break-word;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    @media only screen and (max-width: 600px) {\r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\n\r\nexport const OutCartText = styled.div`\r\n    font-size: 24px;\r\n    overflow: hidden;\r\n    padding: 5px;\r\n    word-wrap: break-word;\r\n    text-align: left;\r\n    width: auto;\r\n\r\n    @media only screen and (max-width: 600px) { \r\n        font-size: 16px;\r\n    }\r\n`;\r\n\r\nexport const User = styled.div`\r\n    border-radius: 4px;\r\n    padding: 3px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: #c1d6ff;\r\n    margin: 5px;\r\n`;\r\n\r\nexport const FDRow = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\n","import React, {useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport Item from './Item'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n\r\n\r\nconst Groceries = ({listkey, groceries, setGroceries}) => {\r\n\r\n    useEffect(() => {\r\n        const getGroceries = async () => {\r\n            try {\r\n                if(listkey !== ''){\r\n                    console.log(listkey)\r\n                    const response = await axios.get(`/all-items/${listkey}`)\r\n                    console.log(response)\r\n                    setGroceries(response.data)\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        getGroceries()\r\n    }, [listkey, setGroceries])\r\n\r\n    const removeItems = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const response = await axios.post('/remove-all-items',{listkey: listkey})\r\n            console.log(response)\r\n            setGroceries('')\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {groceries.length > 0 ? (groceries.map((element, index) => <Item key={index} element = {element} itemPos={index} groceries={groceries} setGroceries={setGroceries}/>)) : <></>}\r\n            {groceries.length > 0 ? <Button variant= 'outline-danger' style={{width: '95%', margin: 'auto'}} onClick = {removeItems} block> Clear Items</Button> : <></>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Groceries\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nconst AddItemInput = ({listkey, groceries, setGroceries, nickname}) => {\r\n\r\n    const [item, setItem] = useState('')\r\n\r\n    const addItem = async (e) => {\r\n        e.preventDefault()\r\n\r\n        const data={\r\n            text: item,\r\n            inCart: false,\r\n            listkey: listkey,\r\n            name: nickname\r\n        };\r\n\r\n        try{\r\n            const response = await axios.post('/add-item', data)\r\n            console.log(response)\r\n            let temp = [...groceries]\r\n            temp.push(data)\r\n            setGroceries(temp)\r\n            setItem('')\r\n        }catch(error){console.log(error)}\r\n        \r\n    }\r\n\r\n    return (\r\n        <AIContainer onSubmit={addItem}>\r\n            <AIInput value={item} onChange={(e) => setItem(e.target.value)} placeholder='Add Item'/>\r\n            <Button type='submit' style={{width: '15%', padding: '10px'}}>Add</Button>\r\n        </AIContainer>\r\n    )\r\n}\r\n\r\nexport default AddItemInput\r\n\r\n\r\nexport const AIContainer = styled.form`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin: 10px auto;\r\n    width: 95%;\r\n\r\n    \r\n`;\r\n\r\nexport const AIInput = styled.input`\r\n    font-size: 18px;\r\n    border-radius: 4px;\r\n    border: none;\r\n    border: #ddd 1px solid;\r\n    width: 80%;\r\n    padding: 10px;\r\n`;\r\n","import React, {useState,useEffect} from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar'\r\nimport styled from 'styled-components'\r\nimport Groceries from './components/Groceries'\r\nimport AddItemInput from './components/AddItemInput'\r\n\r\nfunction App() {\r\n\r\n  const [listkey, setListKey] = useState('')\r\n  const [groceries, setGroceries] = useState('')\r\n  const [nickname, setNickname] = useState('?')\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    const key = urlParams.get('listkey');\r\n    const name = localStorage.getItem('nickname');\r\n    setListKey(key)\r\n    setNickname(name)\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar listkey={listkey} setNickname={setNickname} nickname={nickname}/>\r\n        <Container>\r\n          <AddItemInput listkey={listkey} groceries={groceries} setGroceries={setGroceries} nickname={nickname}/>\r\n          <Groceries listkey={listkey} groceries={groceries} setGroceries={setGroceries}/>\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    max-width: 900px;\r\n    margin: auto;\r\n`;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}